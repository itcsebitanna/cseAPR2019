AIM :  To write the program to simulate the Round Robin program.
 ALGORITHM:
Step 1: Initialize all the structure elements
 Step 2: Receive inputs from the user to fill process id,burst time and arrival time.
 Step 3: Calculate the waiting time for all the process id.
     i) The waiting time for first instance of a process is calculated as:
     a[i].waittime=count + a[i].arrivt
  ii) The waiting time for the rest of the instances of the process is calculated as:
    a) If the time quantum is greater than the remaining burst time then waiting time is         calculated as:   
     a[i].waittime=count + tq
  b) Else if the time quantum is greater than the remaining burst time then waiting time is calculated as:  
      a[i].waittime=count - remaining burst time  
Step 4: Calculate the average waiting time and average turnaround time  Step
 5: Print the results of the step 4.
 PROGRAM CODING:
#include<stdio.h>
void main()
{
 int i,tbt=0,nop,ts=0,flag[20], rem[20];
 int from,wt[20],tt[20],b[20], twt=0,ttt=0;
int dur; float awt,att;
 printf("Enter no. of Processes: ");
scanf("%d",&nop);
 printf("Enter the time slice: ");
 scanf("%d",&ts);
printf("Enter the Burst times..\n");
for(i=0;i<nop;i++)  
{
 wt[i]=tt[i]=0;
printf("P%d\t: ",i+1);
scanf("%d",&b[i]);
rem[i]=b[i]; tbt+=b[i];
flag[i]=0;
}
 from=0; i=0;
 printf("\n\t Gantt Chart");
printf("\n  ProcessID\tFrom Time\tTo Time\n");
 while(from<tbt)
{
 if(!flag[i])
 {
if(rem[i]<=ts)
{
 dur=rem[i];
flag[i]=1; tt[i]=dur+from;
wt[i]=tt[i]-b[i];
}
else dur=ts;
printf("%7d%15d%15d\n",i+1, from,from+dur);
 rem[i] -= dur; from += dur;
 }
 i=(i+1)%nop;
}
 for(i=0;i<nop;i++)
{
twt+=wt[i]; ttt+=tt[i];
 }
 printf("\n\n Process ID \t Waiting Time \t Turn Around Time");
for(i=0;i<nop;i++)
{
 printf("\n\t%d\t\t%d\t\t%d",i+1,wt[i],tt[i]);
 }
 awt=(float)twt/(float)nop;
 att=(float)ttt/(float)nop;
printf("\nTotal Waiting Time:%d",twt);
 printf("\nTotal Turn Around Time:%d",ttt);
 printf("\nAverage Waiting Time:%.2f",awt);
 printf("\nAverage Turn Around Time:%.2f\n",att);
}
 OUTPUT:  
Enter no. of Processes: 3
 Enter the time slice: 3
 Enter the Burst times.. P1 : 24
 P2 : 5 P3 : 3
                          Gantt Chart
 ProcessID        From Time          To Time
   1                             0                            3
  2                             3                             6
 3                               6                            9
 1                               9                           12
 2                            12                           14
1                             14                          17
1                            17                          20
1                            20                          23
 1                           23                          26
 1                          26                         29
 1                          29                        32
Process ID             Waiting Time     Turn Around Time
1                                      8                                 3
2                                      9                               14                                   
3                                     6                                9
 Total Waiting Time:23
  Total Turn Around Time:55
  Average Waiting Time:7.67   
 Average Turn Around Time:18.33
 RESULT: Thus the program was executed successfully
